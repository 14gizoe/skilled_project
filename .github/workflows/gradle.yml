# project cicd를 위한 환경설정

name: skilled_project 배포 자동화

# 아래의 브랜치에 해당 트리거가 발생하면 자동 배포
on:
  push:
    branches: [ "main", "feat/board" ]
  pull_request:
    branches: [ "develop" ]

# 코드가 변경되면 실행할 작업들
jobs:
  CI-CD:
    runs-on: ubuntu-latest
    # 이 workflow에 리포지토리에 대한 읽기 권한을 부여한다.
    permissions:
      contents: read
    # 단계 설정
    steps:
      - uses: actions/checkout@v4
      #  1. jdk 버전 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. project에 맞는 gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # 3. gradle build
      - name: gradlew에 실행권한 부여
        run: chmod +x ./gradlew
      # 4. build
      - name: Build with Gradle Wrapper ( 프로젝트 빌드 )
        run: ./gradlew build

      # 5. docker build & push
      - name: docker build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/yiyaaa .
          docker push ${{ secrets.DOCKER_REPO }}/yiyaaa

      # 6. docker deploy to ec2
      - name: Docker deploy to ec2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker rm -f $(docker ps -aq)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/yiyaaa
            docker-compose up -d
            sudo docker 
            sudo docker image prune -f

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          aws-region: ap-northeast-2
